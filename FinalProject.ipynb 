{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Loan_Prediction_based_on_Customer_Behavior_Anna&Lucas.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tA0gWXfBVJIw"
      },
      "source": [
        "# Thesis Statement: \n",
        "\n",
        "We intend to use Loan Prediction Training Dataset to predict those potential non-defaulter and defaulters are for customer loans product. \n",
        "\n",
        "We apply 5 models to test the dataset including DecisonTreeClassifer, logiticsRegression, RandomForestClassifer, XGBClassifer, and LightGBM. \n",
        "We decide to use AUC and accuracy to select best classifier where AUC is given priority over accuracy. We also checkout confusion matrix, recall and precision. \n",
        "\n",
        "We propose a DecisionTree classifier to predict. The accuracy score  is 0.89 and the AUC is 0.91.  \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8PZ3bmM3tJgc"
      },
      "source": [
        "# import pacakges\n",
        "import numpy as np \n",
        "import pandas as pd \n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import sklearn.metrics as metrics\n",
        "import os"
      ],
      "execution_count": 189,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hi8e9GXXywQP",
        "outputId": "5d6a0b42-ada5-413b-9c1d-b3f6f11d4dc8"
      },
      "source": [
        "# read data \n",
        "import pandas as pd\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "#data = pd.read_csv(\"drive/My Drive/Training Data.csv\")\n",
        "data = pd.read_csv(\"drive/My Drive/Colab Notebooks/Big Data ML/Training Data.csv\")\n",
        "data.head()\n",
        "data1=data.drop('Id',axis=1)"
      ],
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8p8JRK9HUq-i"
      },
      "source": [
        "# Exploratory Data Analysis "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z-JgjuMg0lhh",
        "outputId": "f397e4fd-8a1e-44c5-fcaa-386545e21b85"
      },
      "source": [
        "data1.info()"
      ],
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 252000 entries, 0 to 251999\n",
            "Data columns (total 12 columns):\n",
            " #   Column             Non-Null Count   Dtype \n",
            "---  ------             --------------   ----- \n",
            " 0   Income             252000 non-null  int64 \n",
            " 1   Age                252000 non-null  int64 \n",
            " 2   Experience         252000 non-null  int64 \n",
            " 3   Married/Single     252000 non-null  object\n",
            " 4   House_Ownership    252000 non-null  object\n",
            " 5   Car_Ownership      252000 non-null  object\n",
            " 6   Profession         252000 non-null  object\n",
            " 7   CITY               252000 non-null  object\n",
            " 8   STATE              252000 non-null  object\n",
            " 9   CURRENT_JOB_YRS    252000 non-null  int64 \n",
            " 10  CURRENT_HOUSE_YRS  252000 non-null  int64 \n",
            " 11  Risk_Flag          252000 non-null  int64 \n",
            "dtypes: int64(6), object(6)\n",
            "memory usage: 23.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LbyLr1pb0szT",
        "outputId": "10294e66-bebe-4bb1-dd8a-96c168a85743"
      },
      "source": [
        "data1['Married/Single'].unique()\n"
      ],
      "execution_count": 192,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['single', 'married'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 192
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MEUaPNki1OPt",
        "outputId": "83471a60-f9ec-41be-c188-8276d1d79e49"
      },
      "source": [
        "data1['House_Ownership'].unique()\n"
      ],
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['rented', 'norent_noown', 'owned'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3lo9e_3F1QF_",
        "outputId": "dec3bf26-742f-48f0-bc94-289d9b138c4e"
      },
      "source": [
        "data1['Car_Ownership'].unique()\n"
      ],
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['no', 'yes'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 194
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qZUoXwg71SqS",
        "outputId": "405ff424-ef12-45ee-8b3f-da539c936735"
      },
      "source": [
        "data1['Profession'].unique()\n"
      ],
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Mechanical_engineer', 'Software_Developer', 'Technical_writer',\n",
              "       'Civil_servant', 'Librarian', 'Economist', 'Flight_attendant',\n",
              "       'Architect', 'Designer', 'Physician', 'Financial_Analyst',\n",
              "       'Air_traffic_controller', 'Politician', 'Police_officer', 'Artist',\n",
              "       'Surveyor', 'Design_Engineer', 'Chemical_engineer',\n",
              "       'Hotel_Manager', 'Dentist', 'Comedian', 'Biomedical_Engineer',\n",
              "       'Graphic_Designer', 'Computer_hardware_engineer',\n",
              "       'Petroleum_Engineer', 'Secretary', 'Computer_operator',\n",
              "       'Chartered_Accountant', 'Technician', 'Microbiologist',\n",
              "       'Fashion_Designer', 'Aviator', 'Psychologist', 'Magistrate',\n",
              "       'Lawyer', 'Firefighter', 'Engineer', 'Official', 'Analyst',\n",
              "       'Geologist', 'Drafter', 'Statistician', 'Web_designer',\n",
              "       'Consultant', 'Chef', 'Army_officer', 'Surgeon', 'Scientist',\n",
              "       'Civil_engineer', 'Industrial_Engineer', 'Technology_specialist'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GYVhhZ2W1Uca",
        "outputId": "81be478a-78e4-43ff-a6bc-efa8ee1812e4"
      },
      "source": [
        "data1['CITY'].unique()\n"
      ],
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Rewa', 'Parbhani', 'Alappuzha', 'Bhubaneswar',\n",
              "       'Tiruchirappalli[10]', 'Jalgaon', 'Tiruppur', 'Jamnagar',\n",
              "       'Kota[6]', 'Karimnagar', 'Hajipur[31]', 'Adoni', 'Erode[17]',\n",
              "       'Kollam', 'Madurai', 'Anantapuram[24]', 'Kamarhati', 'Bhusawal',\n",
              "       'Sirsa', 'Amaravati', 'Secunderabad', 'Ahmedabad', 'Ajmer',\n",
              "       'Ongole', 'Miryalaguda', 'Ambattur', 'Indore', 'Pondicherry',\n",
              "       'Shimoga', 'Chennai', 'Gulbarga', 'Khammam', 'Saharanpur',\n",
              "       'Gopalpur', 'Amravati', 'Udupi', 'Howrah', 'Aurangabad[39]',\n",
              "       'Hospet', 'Shimla', 'Khandwa', 'Bidhannagar', 'Bellary', 'Danapur',\n",
              "       'Purnia[26]', 'Bijapur', 'Patiala', 'Malda', 'Sagar', 'Durgapur',\n",
              "       'Junagadh', 'Singrauli', 'Agartala', 'Thanjavur', 'Hindupur',\n",
              "       'Naihati', 'North_Dumdum', 'Panchkula', 'Anantapur', 'Serampore',\n",
              "       'Bathinda', 'Nadiad', 'Kanpur', 'Haridwar', 'Berhampur',\n",
              "       'Jamshedpur', 'Hyderabad', 'Bidar', 'Kottayam', 'Solapur',\n",
              "       'Suryapet', 'Aizawl', 'Asansol', 'Deoghar', 'Eluru[25]',\n",
              "       'Ulhasnagar', 'Aligarh', 'South_Dumdum', 'Berhampore',\n",
              "       'Gandhinagar', 'Sonipat', 'Muzaffarpur', 'Raichur',\n",
              "       'Rajpur_Sonarpur', 'Ambarnath', 'Katihar', 'Kozhikode', 'Vellore',\n",
              "       'Malegaon', 'Kochi', 'Nagaon', 'Nagpur', 'Srinagar', 'Davanagere',\n",
              "       'Bhagalpur', 'Siwan[32]', 'Meerut', 'Dindigul', 'Bhatpara',\n",
              "       'Ghaziabad', 'Kulti', 'Chapra', 'Dibrugarh', 'Panihati',\n",
              "       'Bhiwandi', 'Morbi', 'Kalyan-Dombivli', 'Gorakhpur', 'Panvel',\n",
              "       'Siliguri', 'Bongaigaon', 'Patna', 'Ramgarh', 'Ozhukarai',\n",
              "       'Mirzapur', 'Akola', 'Satna', 'Motihari[34]', 'Jalna', 'Jalandhar',\n",
              "       'Unnao', 'Karnal', 'Cuttack', 'Proddatur', 'Ichalkaranji',\n",
              "       'Warangal[11][12]', 'Jhansi', 'Bulandshahr', 'Narasaraopet',\n",
              "       'Chinsurah', 'Jehanabad[38]', 'Dhanbad', 'Gudivada', 'Gandhidham',\n",
              "       'Raiganj', 'Kishanganj[35]', 'Varanasi', 'Belgaum',\n",
              "       'Tirupati[21][22]', 'Tumkur', 'Coimbatore', 'Kurnool[18]',\n",
              "       'Gurgaon', 'Muzaffarnagar', 'Aurangabad', 'Bhavnagar', 'Arrah',\n",
              "       'Munger', 'Tirunelveli', 'Mumbai', 'Mango', 'Nashik', 'Kadapa[23]',\n",
              "       'Amritsar', 'Khora,_Ghaziabad', 'Ambala', 'Agra', 'Ratlam',\n",
              "       'Surendranagar_Dudhrej', 'Delhi_city', 'Bhopal', 'Hapur', 'Rohtak',\n",
              "       'Durg', 'Korba', 'Bangalore', 'Shivpuri', 'Thrissur',\n",
              "       'Vijayanagaram', 'Farrukhabad', 'Nangloi_Jat', 'Madanapalle',\n",
              "       'Thoothukudi', 'Nagercoil', 'Gaya', 'Chandigarh_city', 'Jammu[16]',\n",
              "       'Kakinada', 'Dewas', 'Bhalswa_Jahangir_Pur', 'Baranagar',\n",
              "       'Firozabad', 'Phusro', 'Allahabad', 'Guna', 'Thane', 'Etawah',\n",
              "       'Vasai-Virar', 'Pallavaram', 'Morena', 'Ballia', 'Surat',\n",
              "       'Burhanpur', 'Phagwara', 'Mau', 'Mangalore', 'Alwar',\n",
              "       'Mahbubnagar', 'Maheshtala', 'Hazaribagh', 'Bihar_Sharif',\n",
              "       'Faridabad', 'Lucknow', 'Tenali', 'Barasat', 'Amroha', 'Giridih',\n",
              "       'Begusarai', 'Medininagar', 'Rajahmundry[19][20]', 'Saharsa[29]',\n",
              "       'New_Delhi', 'Bhilai', 'Moradabad', 'Machilipatnam',\n",
              "       'Mira-Bhayandar', 'Pali', 'Navi_Mumbai', 'Mehsana', 'Imphal',\n",
              "       'Kolkata', 'Sambalpur', 'Ujjain', 'Madhyamgram', 'Jabalpur',\n",
              "       'Jamalpur[36]', 'Ludhiana', 'Bareilly', 'Gangtok', 'Anand',\n",
              "       'Dehradun', 'Pune', 'Satara', 'Srikakulam', 'Raipur', 'Jodhpur',\n",
              "       'Darbhanga', 'Nizamabad', 'Nandyal', 'Dehri[30]', 'Jorhat',\n",
              "       'Ranchi', 'Kumbakonam', 'Guntakal', 'Haldia', 'Loni',\n",
              "       'Pimpri-Chinchwad', 'Rajkot', 'Nanded', 'Noida',\n",
              "       'Kirari_Suleman_Nagar', 'Jaunpur', 'Bilaspur', 'Sambhal', 'Dhule',\n",
              "       'Rourkela', 'Thiruvananthapuram', 'Dharmavaram', 'Nellore[14][15]',\n",
              "       'Visakhapatnam[4]', 'Karawal_Nagar', 'Jaipur', 'Avadi',\n",
              "       'Bhimavaram', 'Bardhaman', 'Silchar', 'Buxar[37]', 'Kavali',\n",
              "       'Tezpur', 'Ramagundam[27]', 'Yamunanagar', 'Sri_Ganganagar',\n",
              "       'Sasaram[30]', 'Sikar', 'Bally', 'Bhiwani', 'Rampur', 'Uluberia',\n",
              "       'Sangli-Miraj_&_Kupwad', 'Hosur', 'Bikaner', 'Shahjahanpur',\n",
              "       'Sultan_Pur_Majra', 'Vijayawada', 'Bharatpur', 'Tadepalligudem',\n",
              "       'Tinsukia', 'Salem', 'Mathura', 'Guntur[13]', 'Hubliâ€“Dharwad',\n",
              "       'Guwahati', 'Chittoor[28]', 'Tiruvottiyur', 'Vadodara',\n",
              "       'Ahmednagar', 'Fatehpur', 'Bhilwara', 'Kharagpur', 'Bettiah[33]',\n",
              "       'Bhind', 'Bokaro', 'Karaikudi', 'Raebareli', 'Pudukkottai',\n",
              "       'Udaipur', 'Mysore[7][8][9]', 'Panipat', 'Latur', 'Tadipatri',\n",
              "       'Bahraich', 'Orai', 'Raurkela_Industrial_Township', 'Gwalior',\n",
              "       'Katni', 'Chandrapur', 'Kolhapur'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3UnJpeIy1Wx_",
        "outputId": "c9d9c8e1-1207-40b9-b974-74c7b6ba7d81"
      },
      "source": [
        "data1['STATE'].unique()"
      ],
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Madhya_Pradesh', 'Maharashtra', 'Kerala', 'Odisha', 'Tamil_Nadu',\n",
              "       'Gujarat', 'Rajasthan', 'Telangana', 'Bihar', 'Andhra_Pradesh',\n",
              "       'West_Bengal', 'Haryana', 'Puducherry', 'Karnataka',\n",
              "       'Uttar_Pradesh', 'Himachal_Pradesh', 'Punjab', 'Tripura',\n",
              "       'Uttarakhand', 'Jharkhand', 'Mizoram', 'Assam',\n",
              "       'Jammu_and_Kashmir', 'Delhi', 'Chhattisgarh', 'Chandigarh',\n",
              "       'Uttar_Pradesh[5]', 'Manipur', 'Sikkim'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4xQvKXllxRL",
        "outputId": "d75a0c47-e9e1-4422-f8f3-f60894c4cf36"
      },
      "source": [
        "data1.isnull()\n",
        "data1.info()"
      ],
      "execution_count": 198,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 252000 entries, 0 to 251999\n",
            "Data columns (total 12 columns):\n",
            " #   Column             Non-Null Count   Dtype \n",
            "---  ------             --------------   ----- \n",
            " 0   Income             252000 non-null  int64 \n",
            " 1   Age                252000 non-null  int64 \n",
            " 2   Experience         252000 non-null  int64 \n",
            " 3   Married/Single     252000 non-null  object\n",
            " 4   House_Ownership    252000 non-null  object\n",
            " 5   Car_Ownership      252000 non-null  object\n",
            " 6   Profession         252000 non-null  object\n",
            " 7   CITY               252000 non-null  object\n",
            " 8   STATE              252000 non-null  object\n",
            " 9   CURRENT_JOB_YRS    252000 non-null  int64 \n",
            " 10  CURRENT_HOUSE_YRS  252000 non-null  int64 \n",
            " 11  Risk_Flag          252000 non-null  int64 \n",
            "dtypes: int64(6), object(6)\n",
            "memory usage: 23.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "OJfHJApsmz4_",
        "outputId": "ca8afede-14e1-415d-85d8-2e2ab18f79d6"
      },
      "source": [
        "data1.describe().T"
      ],
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>252000.0</td>\n",
              "      <td>4.997117e+06</td>\n",
              "      <td>2.878311e+06</td>\n",
              "      <td>10310.0</td>\n",
              "      <td>2503015.0</td>\n",
              "      <td>5000694.5</td>\n",
              "      <td>7477502.0</td>\n",
              "      <td>9999938.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>252000.0</td>\n",
              "      <td>4.995407e+01</td>\n",
              "      <td>1.706385e+01</td>\n",
              "      <td>21.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>50.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>79.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Experience</th>\n",
              "      <td>252000.0</td>\n",
              "      <td>1.008444e+01</td>\n",
              "      <td>6.002590e+00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>20.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CURRENT_JOB_YRS</th>\n",
              "      <td>252000.0</td>\n",
              "      <td>6.333877e+00</td>\n",
              "      <td>3.647053e+00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>14.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CURRENT_HOUSE_YRS</th>\n",
              "      <td>252000.0</td>\n",
              "      <td>1.199779e+01</td>\n",
              "      <td>1.399037e+00</td>\n",
              "      <td>10.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>14.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Risk_Flag</th>\n",
              "      <td>252000.0</td>\n",
              "      <td>1.230000e-01</td>\n",
              "      <td>3.284379e-01</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      count          mean  ...        75%        max\n",
              "Income             252000.0  4.997117e+06  ...  7477502.0  9999938.0\n",
              "Age                252000.0  4.995407e+01  ...       65.0       79.0\n",
              "Experience         252000.0  1.008444e+01  ...       15.0       20.0\n",
              "CURRENT_JOB_YRS    252000.0  6.333877e+00  ...        9.0       14.0\n",
              "CURRENT_HOUSE_YRS  252000.0  1.199779e+01  ...       13.0       14.0\n",
              "Risk_Flag          252000.0  1.230000e-01  ...        0.0        1.0\n",
              "\n",
              "[6 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 199
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 715
        },
        "id": "C1SzYw2wxIY1",
        "outputId": "93cfdc02-088c-4043-eb54-1cc7962ac00c"
      },
      "source": [
        "data1.hist(figsize=(12, 12))\n",
        "plt.show()\n",
        "# we can tell from those histograms that our data are in decent shape, there is no significant skewness. "
      ],
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x864 with 6 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mwf8R0oz83sq",
        "outputId": "454a4c85-7fa6-4b45-fa89-f0e9f1085544"
      },
      "source": [
        "# skewness descrption\n",
        "print(data1.skew(axis = 0, skipna = True))"
      ],
      "execution_count": 201,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Income               0.005958\n",
            "Age                 -0.005316\n",
            "Experience          -0.012779\n",
            "CURRENT_JOB_YRS      0.273146\n",
            "CURRENT_HOUSE_YRS    0.006786\n",
            "Risk_Flag            2.295734\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "LaWsOHc6m5IM",
        "outputId": "9f358aa6-83d9-41d2-9571-c9b9d7febc25"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "correlation= data1.corr()\n",
        "correlation\n"
      ],
      "execution_count": 202,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Income</th>\n",
              "      <th>Age</th>\n",
              "      <th>Experience</th>\n",
              "      <th>CURRENT_JOB_YRS</th>\n",
              "      <th>CURRENT_HOUSE_YRS</th>\n",
              "      <th>Risk_Flag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Income</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.000652</td>\n",
              "      <td>0.006422</td>\n",
              "      <td>0.007045</td>\n",
              "      <td>-0.002397</td>\n",
              "      <td>-0.003091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>-0.000652</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.001118</td>\n",
              "      <td>0.002154</td>\n",
              "      <td>-0.020134</td>\n",
              "      <td>-0.021809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Experience</th>\n",
              "      <td>0.006422</td>\n",
              "      <td>-0.001118</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.646098</td>\n",
              "      <td>0.019309</td>\n",
              "      <td>-0.034523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CURRENT_JOB_YRS</th>\n",
              "      <td>0.007045</td>\n",
              "      <td>0.002154</td>\n",
              "      <td>0.646098</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.005372</td>\n",
              "      <td>-0.016942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CURRENT_HOUSE_YRS</th>\n",
              "      <td>-0.002397</td>\n",
              "      <td>-0.020134</td>\n",
              "      <td>0.019309</td>\n",
              "      <td>0.005372</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.004375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Risk_Flag</th>\n",
              "      <td>-0.003091</td>\n",
              "      <td>-0.021809</td>\n",
              "      <td>-0.034523</td>\n",
              "      <td>-0.016942</td>\n",
              "      <td>-0.004375</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     Income       Age  ...  CURRENT_HOUSE_YRS  Risk_Flag\n",
              "Income             1.000000 -0.000652  ...          -0.002397  -0.003091\n",
              "Age               -0.000652  1.000000  ...          -0.020134  -0.021809\n",
              "Experience         0.006422 -0.001118  ...           0.019309  -0.034523\n",
              "CURRENT_JOB_YRS    0.007045  0.002154  ...           0.005372  -0.016942\n",
              "CURRENT_HOUSE_YRS -0.002397 -0.020134  ...           1.000000  -0.004375\n",
              "Risk_Flag         -0.003091 -0.021809  ...          -0.004375   1.000000\n",
              "\n",
              "[6 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 202
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 991
        },
        "id": "zRdSNrdJaJwR",
        "outputId": "5afd82d7-6c15-493d-f704-854c429813f3"
      },
      "source": [
        "corr = data1.corr()\n",
        "corr\n",
        "plt.figure(figsize=(12,15))\n",
        "sns.heatmap(corr,annot=True)"
      ],
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f4512bd4a50>"
            ]
          },
          "metadata": {},
          "execution_count": 203
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x1080 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v4oLmQEbolH0"
      },
      "source": [
        "# # heatmap\n",
        "# plt.figure(figsize=(9, 9))\n",
        "# sns.heatmap(correlation,cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size': 8}, cmap='YlGnBu')\n",
        "# # It seems that independent variables have no relationship with each other. "
      ],
      "execution_count": 204,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eniGfOWyp3jx",
        "outputId": "5e4a2e7e-6d31-470d-9a6e-d191c148b050"
      },
      "source": [
        "correlation[\"Risk_Flag\"].sort_values(ascending=False)"
      ],
      "execution_count": 205,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Risk_Flag            1.000000\n",
              "Income              -0.003091\n",
              "CURRENT_HOUSE_YRS   -0.004375\n",
              "CURRENT_JOB_YRS     -0.016942\n",
              "Age                 -0.021809\n",
              "Experience          -0.034523\n",
              "Name: Risk_Flag, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 205
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xt0LHexWdrnx"
      },
      "source": [
        "# due to high correlated relationship between current job year and education, we decided to drop one of them."
      ],
      "execution_count": 206,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "A8iy7_HV0q0T",
        "outputId": "05340d83-3410-4125-8dcd-b1851df72ff9"
      },
      "source": [
        "# profession, city, and state were dropped because of cardinality.\n",
        "data2=data1.drop(['Profession','CITY','STATE'],axis=1)\n",
        "data2\n"
      ],
      "execution_count": 207,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Income</th>\n",
              "      <th>Age</th>\n",
              "      <th>Experience</th>\n",
              "      <th>Married/Single</th>\n",
              "      <th>House_Ownership</th>\n",
              "      <th>Car_Ownership</th>\n",
              "      <th>CURRENT_JOB_YRS</th>\n",
              "      <th>CURRENT_HOUSE_YRS</th>\n",
              "      <th>Risk_Flag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1303834</td>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7574516</td>\n",
              "      <td>40</td>\n",
              "      <td>10</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>9</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3991815</td>\n",
              "      <td>66</td>\n",
              "      <td>4</td>\n",
              "      <td>married</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6256451</td>\n",
              "      <td>41</td>\n",
              "      <td>2</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>yes</td>\n",
              "      <td>2</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5768871</td>\n",
              "      <td>47</td>\n",
              "      <td>11</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>3</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251995</th>\n",
              "      <td>8154883</td>\n",
              "      <td>43</td>\n",
              "      <td>13</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>6</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251996</th>\n",
              "      <td>2843572</td>\n",
              "      <td>26</td>\n",
              "      <td>10</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>6</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251997</th>\n",
              "      <td>4522448</td>\n",
              "      <td>46</td>\n",
              "      <td>7</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>7</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251998</th>\n",
              "      <td>6507128</td>\n",
              "      <td>45</td>\n",
              "      <td>0</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251999</th>\n",
              "      <td>9070230</td>\n",
              "      <td>70</td>\n",
              "      <td>17</td>\n",
              "      <td>single</td>\n",
              "      <td>rented</td>\n",
              "      <td>no</td>\n",
              "      <td>7</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>252000 rows × 9 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         Income  Age  Experience  ... CURRENT_JOB_YRS CURRENT_HOUSE_YRS Risk_Flag\n",
              "0       1303834   23           3  ...               3                13         0\n",
              "1       7574516   40          10  ...               9                13         0\n",
              "2       3991815   66           4  ...               4                10         0\n",
              "3       6256451   41           2  ...               2                12         1\n",
              "4       5768871   47          11  ...               3                14         1\n",
              "...         ...  ...         ...  ...             ...               ...       ...\n",
              "251995  8154883   43          13  ...               6                11         0\n",
              "251996  2843572   26          10  ...               6                11         0\n",
              "251997  4522448   46           7  ...               7                12         0\n",
              "251998  6507128   45           0  ...               0                10         0\n",
              "251999  9070230   70          17  ...               7                11         0\n",
              "\n",
              "[252000 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5iXXz166Whzo"
      },
      "source": [
        "# Preprocessing Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "07onlMYv21VK"
      },
      "source": [
        "# seperate catogroical and numerical variables\n",
        "cat_var = ['Married/Single','House_Ownership','Car_Ownership']\n",
        "num_var = ['Income', 'Age', 'Experience', 'CURRENT_JOB_YRS', 'CURRENT_HOUSE_YRS']\n",
        "\n"
      ],
      "execution_count": 208,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "4b63y3lBlEE-",
        "outputId": "4b84abfe-2421-419f-8512-8dcdd93c692f"
      },
      "source": [
        "# We need to encode the data since the data have a categorical data. In Label Encoder, we can covert the categorical values into numberical labels. \n",
        "labelEncoder = LabelEncoder()\n",
        "\n",
        "# # Encode the object data to type int\n",
        "# for e in data1.columns:\n",
        "#     if data1[e].dtype == 'object':\n",
        "#         labelEncoder.fit(list(data1[e].values))\n",
        "#         data1[e] = labelEncoder.transform(data1[e].values)\n",
        "# data1\n",
        "en = LabelEncoder()\n",
        "catCols = ['Married/Single','House_Ownership','Car_Ownership']\n",
        "for cols in catCols:\n",
        "    data2[cols] = en.fit_transform(data2[cols])\n",
        "data2.head()"
      ],
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Income</th>\n",
              "      <th>Age</th>\n",
              "      <th>Experience</th>\n",
              "      <th>Married/Single</th>\n",
              "      <th>House_Ownership</th>\n",
              "      <th>Car_Ownership</th>\n",
              "      <th>CURRENT_JOB_YRS</th>\n",
              "      <th>CURRENT_HOUSE_YRS</th>\n",
              "      <th>Risk_Flag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1303834</td>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7574516</td>\n",
              "      <td>40</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3991815</td>\n",
              "      <td>66</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6256451</td>\n",
              "      <td>41</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5768871</td>\n",
              "      <td>47</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Income  Age  Experience  ...  CURRENT_JOB_YRS  CURRENT_HOUSE_YRS  Risk_Flag\n",
              "0  1303834   23           3  ...                3                 13          0\n",
              "1  7574516   40          10  ...                9                 13          0\n",
              "2  3991815   66           4  ...                4                 10          0\n",
              "3  6256451   41           2  ...                2                 12          1\n",
              "4  5768871   47          11  ...                3                 14          1\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4xR6kDl64cvP"
      },
      "source": [
        "# Spliting data \n",
        "y = data2[\"Risk_Flag\"]\n",
        "x = data2.drop(\"Risk_Flag\",axis = 1)\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, test_size=0.2,random_state=888)"
      ],
      "execution_count": 210,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "idfW7g5qWk3W",
        "outputId": "488de361-14f6-4c30-bba7-2e36c4eb76c1"
      },
      "source": [
        "y.value_counts()"
      ],
      "execution_count": 211,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    221004\n",
              "1     30996\n",
              "Name: Risk_Flag, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_YQPDlRDf01t"
      },
      "source": [
        "We can see there are some oversampling issue exists. Our next step is to conduct SMOTE for oversample majoirty class. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QCXEADZ97MzD"
      },
      "source": [
        "# data transformation\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "preprocessor= ColumnTransformer(transformers=[('o',OneHotEncoder(sparse=False,handle_unknown='ignore'),cat_var),('s',MinMaxScaler(), num_var)], remainder='passthrough')\n",
        "X_train=preprocessor.fit_transform(x_train)\n",
        "X_test=preprocessor.fit_transform(x_test)\n"
      ],
      "execution_count": 212,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "RYgKaTgAgYJA",
        "outputId": "ca653b63-9899-4e74-9e87-78aa32521594"
      },
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "oversampler = SMOTE(random_state=42, n_jobs=-1, sampling_strategy=1)\n",
        "X_train, y_train = oversampler.fit_resample(X_train, y_train)\n",
        "\n",
        "sns.countplot(x = y_train, palette = 'muted')"
      ],
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning:\n",
            "\n",
            "Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f45126cc790>"
            ]
          },
          "metadata": {},
          "execution_count": 213
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4pkmH6qAWIP-"
      },
      "source": [
        "# Build the Model "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dsmph-lmUZQa"
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.metrics import confusion_matrix"
      ],
      "execution_count": 214,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mqgVb_wUicb3",
        "outputId": "107647ed-2b51-4df3-80c6-cf68465f48e2"
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "dct = DecisionTreeClassifier()\n",
        "dct.fit(X_train,y_train)\n",
        "dct_predict = dct.predict(X_test)\n",
        "print(accuracy_score (y_test, dct_predict))\n",
        "print(roc_auc_score (y_test, dct_predict))"
      ],
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8676388888888888\n",
            "0.8532358133643075\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "_9iKy5d-ivv0",
        "outputId": "3e931390-ff11-4049-cd82-b9e4b69811e2"
      },
      "source": [
        "dct_cfm = confusion_matrix(y_test,dct_predict)\n",
        "group_counts = ['{0:0.0f}'.format(value) for value in\n",
        "                dct_cfm.flatten()]\n",
        "group_percentages = ['{0:.2%}'.format(value) for value in\n",
        "                     dct_cfm.flatten()/np.sum(dct_cfm)]\n",
        "labels = [f'{v2}\\n{v3}' for  v2, v3 in\n",
        "          zip(group_counts,group_percentages)]\n",
        "labels = np.asarray(labels).reshape(2,2)\n",
        "sns.heatmap(dct_cfm, annot=labels, fmt='', cmap='Blues')"
      ],
      "execution_count": 216,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f45126223d0>"
            ]
          },
          "metadata": {},
          "execution_count": 216
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aDCzdfqOi-Ay"
      },
      "source": [
        "\n",
        "\n",
        "*   DecisonTreeClassifer give us 0.86 accuracy socre and 0.85 AUC score\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JM3Uwd5ljmzz"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "lr = LogisticRegression()\n",
        "lr.fit(X_train,y_train)\n",
        "lr_predictions = lr.predict(X_test)"
      ],
      "execution_count": 217,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8KUilzAUjwD6",
        "outputId": "c0a51620-52f2-4646-d5de-55a552dbcadc"
      },
      "source": [
        "print(accuracy_score (y_test, lr_predictions))\n",
        "print(roc_auc_score (y_test, lr_predictions)) "
      ],
      "execution_count": 218,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5098214285714285\n",
            "0.5383738290028532\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "fTRDVha6jyne",
        "outputId": "8c39ed46-717c-46e6-9c68-40c27aa94621"
      },
      "source": [
        "lr_cfm = confusion_matrix(y_test,lr_predictions)\n",
        "\n",
        "group_counts = ['{0:0.0f}'.format(value) for value in\n",
        "                lr_cfm.flatten()]\n",
        "group_percentages = ['{0:.2%}'.format(value) for value in\n",
        "                     lr_cfm.flatten()/np.sum(lr_cfm)]\n",
        "labels = [f'{v2}\\n{v3}' for  v2, v3 in\n",
        "          zip(group_counts,group_percentages)]\n",
        "labels = np.asarray(labels).reshape(2,2)\n",
        "sns.heatmap(lr_cfm, annot=labels, fmt='', cmap='mako')"
      ],
      "execution_count": 219,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f45125d5450>"
            ]
          },
          "metadata": {},
          "execution_count": 219
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xZcixTaGj11U"
      },
      "source": [
        "\n",
        "\n",
        "*   Logistic regression give us 0.51 accuracy socre and 0.54 AUC score\n",
        "*   Also, from the confusion matrix, we can see the model always give negative or 0 for the output so even though it has higher accuracy socre than DecisionTreeClassifer, we won't choose this model for prediction. \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FDG0OaM-kXzX"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier"
      ],
      "execution_count": 220,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9bv-hPpmkmG-"
      },
      "source": [
        "rft = RandomForestClassifier()\n",
        "rft.fit(X_train,y_train)\n",
        "rft_predict = rft.predict(X_test)"
      ],
      "execution_count": 221,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a-C7ScKAkzds",
        "outputId": "fa08df01-b433-453c-de4a-3ebe2c557abe"
      },
      "source": [
        "print(accuracy_score (y_test, rft_predict))\n",
        "print(roc_auc_score (y_test, rft_predict)) "
      ],
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.886547619047619\n",
            "0.8447797515339747\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "GA8KAYdWk1n7",
        "outputId": "39ce05af-293f-4d09-9cbd-338ee320f9b3"
      },
      "source": [
        "rft_cfm = confusion_matrix(y_test,rft_predict)\n",
        "\n",
        "group_counts = ['{0:0.0f}'.format(value) for value in\n",
        "                rft_cfm.flatten()]\n",
        "group_percentages = ['{0:.2%}'.format(value) for value in\n",
        "                     rft_cfm.flatten()/np.sum(rft_cfm)]\n",
        "labels = [f'{v2}\\n{v3}' for  v2, v3 in\n",
        "          zip(group_counts,group_percentages)]\n",
        "labels = np.asarray(labels).reshape(2,2)\n",
        "sns.heatmap(rft_cfm, annot=labels, fmt='', cmap='rocket_r')"
      ],
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f45124f7d50>"
            ]
          },
          "metadata": {},
          "execution_count": 223
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YGF9hhQhm5Pg",
        "outputId": "981e66cc-1708-40d5-d934-598169748ccd"
      },
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, roc_auc_score\n",
        "# Define the model\n",
        "from xgboost import XGBClassifier\n",
        "xgb = XGBClassifier(learning_rate=0.1, \n",
        "                    n_estimators=1000, \n",
        "                    use_label_encoder=False,\n",
        "                    random_state=42)\n",
        "    \n",
        "xgb.fit(X_train, y_train, eval_metric='logloss')\n",
        "xgb_predict = xgb.predict(X_test) \n",
        "print(accuracy_score (y_test, xgb_predict))\n",
        "print(roc_auc_score (y_test, xgb_predict)) "
      ],
      "execution_count": 224,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7860515873015873\n",
            "0.7027779355941047\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yatvoEtS79mB",
        "outputId": "63abab39-2668-4d83-8721-9bfcc1f6d630"
      },
      "source": [
        "import lightgbm as lgb\n",
        "lgb = lgb.LGBMClassifier()\n",
        "lgb.fit(X_train, y_train)\n",
        "lgb_predict=lgb.predict(X_test)\n",
        "print(accuracy_score (y_test, lgb_predict))\n",
        "print(roc_auc_score (y_test, lgb_predict)) "
      ],
      "execution_count": 225,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7940873015873016\n",
            "0.7596462599634708\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7iNd-rhaI-mJ",
        "outputId": "d61fb61c-41ff-4426-bad5-d94b47f079d6"
      },
      "source": [
        "# Hyperparameter tuning using 3 folds RandomSearchCV\n",
        "# Number of trees in random forest\n",
        "n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n",
        "# Number of features to consider at every split\n",
        "max_features = ['auto', 'sqrt']\n",
        "# Maximum number of levels in tree\n",
        "max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n",
        "max_depth.append(None)\n",
        "# Minimum number of samples required to split a node\n",
        "min_samples_split = [2, 5, 10]\n",
        "# Minimum number of samples required at each leaf node\n",
        "min_samples_leaf = [1, 2, 4]\n",
        "# Method of selecting samples for training each tree\n",
        "bootstrap = [True, False]\n",
        "# Create the random grid\n",
        "random_grid = {'n_estimators': n_estimators,\n",
        "               'max_features': max_features,\n",
        "               'max_depth': max_depth,\n",
        "               'min_samples_split': min_samples_split,\n",
        "               'min_samples_leaf': min_samples_leaf,\n",
        "               'bootstrap': bootstrap}\n",
        "print(random_grid)"
      ],
      "execution_count": 226,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], 'max_features': ['auto', 'sqrt'], 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VJZvdb5HrD9j"
      },
      "source": [
        "params = {\n",
        "    # Parameters that we are going to tune.\n",
        "    'max_depth':[1,2,3,4,5,6,7,8,9],\n",
        "    'min_child_weight': [1,\n",
        "    'eta':.3,\n",
        "    'subsample': 1,\n",
        "    'colsample_bytree': 1,\n",
        "    # Other parameters\n",
        "    'objective':'reg:linear',\n",
        "}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_FX3ggD0HWuc"
      },
      "source": [
        "X_train=X_train[:10000,]\n",
        "y_train=y_train[:10000,]\n",
        "X_test=X_test[:10000,]\n",
        "y_test=y_test[:10000,]"
      ],
      "execution_count": 227,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NX7YEttPJP7U",
        "outputId": "f03cf483-650c-4fb4-afd7-98aeefe33509"
      },
      "source": [
        "# Find best model parameter\n",
        "from sklearn.model_selection import RandomizedSearchCV , GridSearchCV, RepeatedStratifiedKFold, StratifiedShuffleSplit,cross_val_score\n",
        "from sklearn.metrics import confusion_matrix , classification_report, make_scorer\n",
        "from sklearn.metrics import precision_score,recall_score,f1_score,accuracy_score\n",
        "rft_random = RandomizedSearchCV(estimator = rft, param_distributions = random_grid, cv = 3, verbose=True, random_state=42, n_jobs = -1)\n",
        "rft_random.fit(X_train,y_train)\n",
        "best_random = rft_random.best_estimator_\n",
        "best_random.fit(X_train,y_train)\n",
        "print(\"Fitting done\")\n",
        "print(rft_random.best_params_)\n",
        "y_pred = best_random.predict(X_test)\n",
        "print('> %s , Accuracy score: %.3f , Roc_Auc_Score: %.3f ' %('Random_search_result',accuracy_score(y_test,y_pred),roc_auc_score(y_test,y_pred)))"
      ],
      "execution_count": 228,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "/usr/local/lib/python3.7/dist-packages/joblib/externals/loky/process_executor.py:691: UserWarning:\n",
            "\n",
            "A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n",
            "\n",
            "[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:  3.3min finished\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting done\n",
            "{'n_estimators': 1000, 'min_samples_split': 10, 'min_samples_leaf': 1, 'max_features': 'auto', 'max_depth': 80, 'bootstrap': False}\n",
            "> Random_search_result , Accuracy score: 0.890 , Roc_Auc_Score: 0.619 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sm_N2qhPUZAT",
        "outputId": "9a24729a-71fc-41fe-c8a5-7066d8f74201"
      },
      "source": [
        "final_model = RandomForestClassifier(n_estimators= 400, min_samples_split= 10, min_samples_leaf= 1, max_features='sqrt',\n",
        "                                     class_weight='balanced',n_jobs=-1,random_state=42,max_depth= 60, bootstrap=False)\n",
        "final_model.fit(X_train,y_train)\n",
        "final_model_predict=final_model.predict(X_test)\n",
        "final_model_cv_socre=cross_val_score(final_model,x,y,cv=3,scoring='roc_auc')\n",
        "\n",
        "print(\"=== Confusion Matrix ===\")\n",
        "print(confusion_matrix(y_test, final_model_predict))\n",
        "print('\\n')\n",
        "\n",
        "print(\"=== Classification Report ===\")\n",
        "print(classification_report(y_test, final_model_predict))\n",
        "print('\\n')\n",
        "\n",
        "print(\"=== All AUC Scores ===\")\n",
        "\n",
        "print(final_model_cv_socre)\n",
        "print('\\n')\n",
        "\n",
        "print(\"=== Mean AUC Score ===\")\n",
        "print(\"Mean AUC Score - Random Forest: \", final_model_cv_socre.mean())"
      ],
      "execution_count": 232,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== Confusion Matrix ===\n",
            "[[8240  579]\n",
            " [ 651  530]]\n",
            "\n",
            "\n",
            "=== Classification Report ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.93      0.93      8819\n",
            "           1       0.48      0.45      0.46      1181\n",
            "\n",
            "    accuracy                           0.88     10000\n",
            "   macro avg       0.70      0.69      0.70     10000\n",
            "weighted avg       0.87      0.88      0.88     10000\n",
            "\n",
            "\n",
            "\n",
            "=== All AUC Scores ===\n",
            "[0.97397014 0.94920357 0.81387562]\n",
            "\n",
            "\n",
            "=== Mean AUC Score ===\n",
            "Mean AUC Score - Random Forest:  0.9123497771753394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "FnaqWo8JQgXf",
        "outputId": "ee4d5cdb-ac78-463b-c7de-d10dd29ffec2"
      },
      "source": [
        "# roc curve\n",
        "plot_roc_curve(final_model,X_test,y_test)"
      ],
      "execution_count": 231,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f4512608090>"
            ]
          },
          "metadata": {},
          "execution_count": 231
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}